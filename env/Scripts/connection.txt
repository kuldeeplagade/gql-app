from graphene import Schema,ObjectType,String,Int,List,Field
from fastapi import FastAPI
from starlette_graphene3 import GraphQLApp,make_playground_handler
from sqlalchemy import create_engine, URL,Column,Integer,String as saString,ForeignKey
from sqlalchemy.orm import relationship,sessionmaker
from sqlalchemy.ext.declarative import declarative_base


url = URL.create(
    drivername="postgresql",  # driver name = postgresql + the library we are using (psycopg2)
    username='postgres',
    password='kuldeep',
    host='localhost',
    database='jobboard',
    port=5432
)

engine = create_engine(url) # skipped echo=True to avoid printing out all the SQL commands


Base =declarative_base()



class Employer(Base):
     __tablename__="employers"

     id=Column(Integer, primary_key=True)
     name=Column(saString)
     contact_email=Column(saString)
     indursty=Column(saString)
     jobs=relationship("Job",back_populates="employer")

class Job(Base):
     __tablename__="jobs"
     id=Column(Integer,primary_key=True)
     title=Column(saString)
     description=Column(saString)    
     employer_id=Column(Integer, ForeignKey("employers.id"))
     employer=relationship("Employer",back_populates="jobs")

Base.metadata.create_all(engine)

Session=sessionmaker(bind=engine)



#static data
employers_data = [
    {"id": 1, "name": "MetaTechA", "contact_email": "contact@company-a.com", "indursty": "Tech"},
    {"id": 2, "name": "MoneySoftB", "contact_email": "contact@company-b.com", "indursty": "Finance"},
]

jobs_data = [
    {"id": 1, "title": "Software Engineer", "description": "Develop web applications", "employer_id": 1},
    {"id": 2, "title": "Data Analyst", "description": "Analyze data and create reports", "employer_id": 1},
    {"id": 3, "title": "Accountant IT", "description": "Manage financial records", "employer_id": 2},
    {"id": 4, "title": "Manager", "description": "Manage people who manage records", "employer_id": 2},
]

def prepare_database():
    Base.metadata.drop_all(engine)
    Base.metadata.create_all(engine)

    session=Session()

    for employer in employers_data:
        emp=Employer(**employer)
        session.add(emp)

    for job in jobs_data:
        session.add(Job(**job)) 

        session.commit()
        session.close()
class EmployerObject(ObjectType):
    id =Int()
    name=String()
    contact_email=String()
    indursty=String()
    jobs=List(lambda:JobObject)

    @staticmethod
    def resolve_jobs(root,info):
         return[job for job in jobs_data if job["employer_id"]==root["id"]]

class JobObject(ObjectType):
    id=Int()
    title=String()
    description=String()
    empolyer_id=Int()
    empolyer=Field(lambda:EmployerObject)

    @staticmethod
    def resolve_emplyer(root,info):
        #itrate over employes..... break
        #list comp...[0]
      return next((employer for employer in employers_data if employer["id"]==root["employer_id"]),None)

class Query(ObjectType):
    jobs=List(JobObject)
    Employer=List(EmployerObject)

    @staticmethod
    def resolve_jobs(root,info):
        return jobs_data
    
    @staticmethod
    def resolve_Employer(root,info):
        return employers_data

schema=Schema(query=Query)

app=FastAPI()
@app.on_event("startup")
def startup_event():
    prepare_database()


app.mount("/graphql", GraphQLApp(
    schema=schema,
    on_get=make_playground_handler()
))
